#+PROPERTY: header-args :results silent
* Startup
** Start in full screen
#+begin_src emacs-lisp
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(toggle-frame-fullscreen)
#+end_src
** Do not send command key to system
It is best to not send command-key to system as weird stuff will happen.
#+begin_src emacs-lisp
(setq mac-pass-command-to-system nil)
#+end_src
* Change mac keyboard settings
Change cmd-key to meta and let alt function as normal for special keys.
#+begin_src emacs-lisp
(setq mac-option-modifier 'none)
(setq mac-right-option-modifier 'meta)
(setq mac-command-modifier 'meta)
#+end_src
* Evil-mode in minibuffer
This is especially useful when changing long variable names in python using SPC c r.
#+begin_src emacs-lisp
(setq evil-want-minibuffer t)
(map! :map minibuffer-local-map :n "RET" 'exit-minibuffer)
#+end_src
Some variable changes are needed to make this work with ivy.
#+begin_src emacs-lisp
(map! :map ivy-mode-map :i "C-j" 'ivy-next-line)
(map! :map ivy-mode-map :i "C-k" 'ivy-previous-line)
(map! :map ivy-mode-map :i "C-g" 'minibuffer-keyboard-quit)
#+end_src
* Toggling of themes
Taken directly from previous config. Makes it possible to toggle themes with "SPC t t".
#+begin_src emacs-lisp
(defvar sh-theme-1 'doom-city-lights)
(defvar sh-theme-2 'doom-solarized-light)
(defvar sh-theme-3 'doom-material)
(defvar sh-current-theme sh-theme-1)

;; Disable other themes before loading new one
(defadvice load-theme (before theme-dont-propagate activate)
  "Disable theme before loading new one."
  (mapc #'disable-theme custom-enabled-themes))

(defun sh-set-next-theme (theme)
  (load-theme theme t)
  (setq sh-current-theme theme))

(defun sh-toggle-theme ()
  (interactive)
  (cond ((eq sh-current-theme sh-theme-1) (sh-set-next-theme sh-theme-2))
        ((eq sh-current-theme sh-theme-2) (sh-set-next-theme sh-theme-3))
        ((eq sh-current-theme sh-theme-3) (sh-set-next-theme sh-theme-1)))
  (run-hooks 'sh-post-theme-change-hook)) ;; Some stuff needs to reset after theme change

(load-theme sh-theme-1 t)
(define-key evil-normal-state-map (kbd "SPC t t") 'sh-toggle-theme)
#+end_src
* Font
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Fira Code" :size 12)
      doom-variable-pitch-font (font-spec :family "Fira Code" :size 12))
#+end_src
* Relative line numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src
* Toggle frame fullscreen
All my [[https://rectangleapp.com/][rectangle]] shortcuts are done by holding command, shift and ctrl at the same time so this keybinding goes well with that scheme.
#+begin_src emacs-lisp
(map! "C-M-Ø" 'toggle-frame-fullscreen)
#+end_src
* Extra navigation and editing commands
Most of these are just personal preferences.
#+begin_src emacs-lisp
(map! :n "g r" 'lsp-find-references
      :n "ø" 'evil-avy-goto-word-or-subword-1
      :n "æ j" 'evilem-motion-next-line
      :n "æ k" 'evilem-motion-previous-line
      :n "-" 'evil-ex-search-forward
      :n "j" 'evil-next-visual-line
      :n "g +" 'evil-numbers/inc-at-pt
      :n "k" 'evil-previous-visual-line)
#+end_src
For some reason, these does not work in org agenda.
#+begin_src emacs-lisp
(map! :map evil-org-agenda-mode-map
      "ø" 'evil-avy-goto-word-or-subword-1)
#+end_src
* Bookmarks
Storing the bookmarks here means it would be synced with dropbox. This allows for the bookmarks to be backed up, as well as being available on multiple machines. Bookmarks being available on different machines is nice as a lot of bookmarks are pointing to dropbox files and remote files.
#+begin_src emacs-lisp
(setq bookmark-default-file "~/org/.bookmarks")
#+end_src
* Compiling
#+begin_src emacs-lisp
(map! :map doom-leader-code-map
      "SPC" 'recompile
      "K" 'kill-compilation)
#+end_src
* Dired-settings
** Change some defaults
#+begin_src emacs-lisp
(map! :map dired-mode-map
      :n "<tab>" #'dired-display-file
      :n "h" #'dired-up-directory
      :n "l" #'dired-find-file)
#+end_src
** Less amount of details
To get more details, just do "(" in a dired buffer.
#+begin_src emacs-lisp
(add-hook 'dired-mode-hook (lambda () (dired-hide-details-mode)))
#+end_src
* Yasnippet
#+begin_src emacs-lisp
(map! :map yas-minor-mode-map "C-ø" #'yas-expand)
#+end_src

#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "SPC y l") 'yas-describe-tables)
(define-key evil-normal-state-map (kbd "SPC y n") 'yas-new-snippet)
#+end_src
* Org-mode
** Start org-mode collapsed
#+begin_src emacs-lisp
(after! org
  (setq org-startup-folded t))
#+end_src
** Do not display line numbers or git info in org buffers
#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda () (display-line-numbers-mode 0)))
(add-hook 'org-mode-hook (lambda () (git-gutter-mode 0)))
#+end_src
** Org latex preview
#+begin_src emacs-lisp
(map! :map org-mode-map :n "SPC m m" 'org-latex-preview)
#+end_src
** Org-babel-tangle
#+begin_src emacs-lisp
(map! :map org-mode-map :n "SPC m ø" 'org-babel-tangle)
#+end_src
** Org agenda keys
#+begin_src emacs-lisp
(map! :map evil-org-agenda-mode-map
      "C-h" 'org-agenda-earlier
      "C-l" 'org-agenda-later)
#+end_src
** Extra shortcut for org agenda
#+begin_src emacs-lisp
(map! :map doom-leader-open-map
      "SPC" 'org-agenda)
#+end_src
** Same bullet for all headings
#+begin_src emacs-lisp
(setq org-superstar-headline-bullets-list '("◉" "◉" "◉" "◉" "◉" "◉"))
#+end_src
** Turn off company in org-mode
#+begin_src emacs-lisp
(add-hook! org-mode (company-mode -1))
#+end_src
** Better navigation through headings
#+begin_src emacs-lisp
(map! :map org-mode-map :n "C-h" 'org-up-element)
(map! :map org-mode-map :n "C-l" 'org-down-element)
(map! :map org-mode-map :n "C-j" 'org-next-visible-heading)
(map! :map org-mode-map :n "C-k" 'org-previous-visible-heading)
#+end_src
** Cycle through headings
This reverts to how the tab key works in "normal" emacs.
#+begin_src emacs-lisp
(after! evil-org
  (remove-hook 'org-tab-first-hook #'+org-cycle-only-current-subtree-h))
#+end_src
** Do not dim blocked tasks
Some tasks ended up looking weird in the agenda because of this as I am sometimes not scheduling subtasks.
#+begin_src emacs-lisp
(setq org-agenda-dim-blocked-tasks nil)
#+end_src
** Clojure code blocks
#+begin_src emacs-lisp
(setq org-babel-clojure-backend 'cider)
#+end_src
** Add timestamp when closing todo
#+begin_src emacs-lisp
(after! org
  (setq org-log-done 'time))
#+end_src
* Clojure
Do not start cider repl in popup mode
#+begin_src emacs-lisp
(after! cider
  (set-popup-rule! "^\\*cider-repl" :ignore t))
#+end_src
* Local settings
#+begin_src emacs-lisp
(load "~/Dropbox/org/.org-elisp-code.el" t)
#+end_src
* Text scale
** Better size of org-headings
#+begin_src emacs-lisp
(custom-set-faces!
 '(outline-1 :font "Monaco" :height 1.4)
 '(outline-2 :font "Monaco" :height 1.25)
 '(outline-3 :font "Monaco" :height 1.15)
 '(outline-4 :font "Monaco" :height 1.10)
 '(outline-5 :font "Monaco" :height 1.10)
 '(outline-6 :font "Monaco" :height 1.10))
#+end_src
** Default text scale
#+begin_src emacs-lisp
(map! :ni "C-+" 'default-text-scale-increase
      :ni "C--" 'default-text-scale-decrease
      :ni "C-x C-0" 'default-text-scale-reset)
#+end_src
* Defaults for ivy
In my opinion, these are better defaults. (if you are not scared of the control key)
#+begin_src emacs-lisp
(map! :map ivy-minibuffer-map
      "C-h" #'ivy-backward-delete-char
      "C-l" #'ivy-alt-done
      "RET" #'ivy-alt-done)
#+end_src
* Not save to killring when deleting single word
This code is stolen from this post: https://www.reddit.com/r/emacs/comments/2ny06e/delete_text_not_kill_it_into_killring/.
#+begin_src emacs-lisp
(defun my-delete-word (arg)
  "Delete characters forward until encountering the end of a word.
With argument, do this that many times.
This command does not push erased text to kill-ring."
  (interactive "p")
  (delete-region (point) (progn (forward-word arg) (point))))

(defun my-backward-delete-word (arg)
  "Delete characters backward until encountering the beginning of a word.
With argument, do this that many times.
This command does not push erased text to kill-ring."
  (interactive "p")
  (my-delete-word (- arg)))

(map! "<M-backspace>" 'my-backward-delete-word)
(map! "<C-backspace>" 'my-backward-delete-word)
#+end_src
* LSP-UI
I find that lsp-ui-sideline is not so good when working with two files side by side.
#+begin_src emacs-lisp
(setq lsp-ui-sideline-enable nil)
#+end_src
* Window configuration
#+begin_src emacs-lisp
(map! :map doom-leader-map "w o" #'delete-other-windows)
#+end_src
* Ispell
Ispell is for spellchecking in emacs. "M-x flyspell-mode" and "M-x flyspell-prog-mode" can be used to see misspelled words in buffer. Ispell-word is useful for checking a current word, while ispell-buffer is interacitve for the whole buffer. For spellchecking while programming, ispell-comments-and-strings is nice.
#+begin_src emacs-lisp
(setq ispell-program-name "aspell")
(ispell-change-dictionary "english" t) ;; Change to english dict globally

(defun sh-toggle-dictionary ()
  (interactive)
  (cond ((string-equal ispell-dictionary "english")
	 (ispell-change-dictionary "norsk" t)
	 (message "Changed to dictionary: Norsk"))
	((string-equal ispell-dictionary "norsk")
	 (ispell-change-dictionary "english" t)
	 (message "Changed to dictionary: English"))))

(map! :leader
      "d w" 'ispell-word
      "d b" 'ispell-buffer
      "d t" 'sh-toggle-dictionary
      "d c" 'ispell-comments-and-strings)
#+end_src
* Avy in all windows
#+begin_src emacs-lisp
(setq avy-all-windows t)
#+end_src
* Python
Delete trailing whitespace on save.
#+begin_src emacs-lisp
(add-hook 'python-mode-hook
      (lambda()
        (add-hook 'local-write-file-hooks
              '(lambda()
                 (save-excursion
                   (delete-trailing-whitespace))))))
#+end_src
** Disable pydocstyle
[[https://github.com/PyCQA/pydocstyle][Pydocstyle]] is probably nice when there are strict policies on docstrings.
#+begin_src emacs-lisp
(after! lsp-mode
  (setq lsp-pylsp-plugins-pydocstyle-enabled nil))
#+end_src
* Javascript
Use rjsx-mode with better highlighting in react files:
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.jsx\\'" . rjsx-mode))
(add-to-list 'auto-mode-alist '("\\.tsx\\'" . rjsx-mode))
#+end_src
* Better navigation in compilation buffers
#+begin_src emacs-lisp
(add-hook 'compilation-mode-hook (lambda () (visual-line-mode 1)))

(map! :map compilation-mode-map
      "h" 'evil-backward-char)
#+end_src
* Faster keybinding for inserting previously deleted text
#+begin_src emacs-lisp
(map! :map doom-leader-insert-map
      "i" '+default/yank-pop)
#+end_src
* Workspaces
Hitting TAB for interacting with workspaces is not that great when there are more ergonomic keys around imo.
#+begin_src emacs-lisp
(map! :map doom-leader-map
      "TAB" nil
      "e" doom-leader-workspace-map)
#+end_src
** Moving between workspaces
It is nice to be able to go one workspave to the left or to the right. These keybindings are more close to the ones for changing between windows in a workspace.
#+begin_src emacs-lisp
(map! :map doom-leader-workspace-map
      "h" '+workspace/switch-left
      "l" '+workspace/switch-right
      "f" '+workspace/switch-to
      "e" '+workspace/display
      "L" '+workspace/load)
#+end_src
